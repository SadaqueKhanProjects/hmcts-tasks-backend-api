plugins {
  id 'application'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'org.springframework.boot' version '3.5.4'
  id 'com.github.ben-manes.versions' version '0.52.0'
  id 'org.sonarqube' version '6.2.0.5505'
  id 'uk.gov.hmcts.java' version '0.12.67'
  id "com.diffplug.spotless" version "6.25.0"
}

spotless {
  java {
    googleJavaFormat("1.22.0")
    removeUnusedImports()
    formatAnnotations()
  }
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntimeOnly.extendsFrom runtimeOnly

  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly

  smokeTestImplementation.extendsFrom testImplementation
  smokeTestRuntimeOnly.extendsFrom runtimeOnly
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test) {
  useJUnitPlatform()
  testLogging { exceptionFormat = 'full' }
}

test {
  failFast = true
}

task functional(type: Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    html.required = true
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport
project.tasks['check'].dependsOn integration

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: test-backend"
    property "sonar.projectKey", "uk.gov.hmcts.reform:test-backend"
  }
}

dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection ->
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://jitpack.io' }
}

ext {
  log4JVersion = "2.25.1"
  logbackVersion = "1.5.18"
}

ext['snakeyaml.version'] = '2.2'

configurations.all {
  exclude group: 'commons-logging', module: 'commons-logging'
}

dependencies {
  // Spring
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-actuator'
  implementation 'org.springframework.boot:spring-boot-starter-aop'
  implementation 'org.springframework.boot:spring-boot-starter-json'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

  // DB & migrations (PostgreSQL 16.x support)
  implementation 'org.flywaydb:flyway-core:10.17.0'
  implementation 'org.flywaydb:flyway-database-postgresql:10.17.0'
  runtimeOnly   'org.postgresql:postgresql:42.7.4'

  // H2 for fast, isolated tests
  testRuntimeOnly 'com.h2database:h2'

  // OpenAPI UI
  implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.9'

  // HMCTS logging + SLF4J bridges
  implementation 'com.github.hmcts.java-logging:logging:6.1.9'
  implementation "org.apache.logging.log4j:log4j-api:${log4JVersion}"
  implementation "org.apache.logging.log4j:log4j-to-slf4j:${log4JVersion}"
  implementation "ch.qos.logback:logback-classic:${logbackVersion}"
  implementation "ch.qos.logback:logback-core:${logbackVersion}"

  // Lombok
  compileOnly 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok'
  testCompileOnly 'org.projectlombok:lombok'
  testAnnotationProcessor 'org.projectlombok:lombok'

  // Testing
  testImplementation platform('org.junit:junit-bom:5.13.4')
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testRuntimeOnly   'org.junit.jupiter:junit-jupiter-engine'
  testImplementation 'io.rest-assured:rest-assured'
}

mainClassName = 'uk.gov.hmcts.reform.dev.Application'

bootJar {
  archiveFileName = "test-backend.jar"
  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

rootProject.tasks.named("processSmokeTestResources") {
  duplicatesStrategy = 'include'
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}

// Force versions for Flyway + PostgreSQL support
configurations.all {
  resolutionStrategy {
    force 'org.flywaydb:flyway-core:10.17.0'
    force 'org.flywaydb:flyway-database-postgresql:10.17.0'
  }
}

tasks.withType(Checkstyle).configureEach {
    ignoreFailures = true     // build wonâ€™t fail on warnings
    // optional: only fail if >N warnings
    // maxWarnings = 200
}

tasks.named('checkstyleFunctionalTest').configure {
    enabled = false
}
